0. next-auth 의 사용

    0. npm install next-auth
    1. /api/auth/[...]/[...nextauth].js 안에, Auth 로직을 만든다.

        * credentials auth 로직 : https://next-auth.js.org/providers/credentials
        * auth 로직은 "async authorize(credentials){ }" 함수 안에
        * "return" 은 "name, email, id 만 가능"하다.
            return {
                email: credentials.email,
                name: userInfo.name,
            };

    2. "SessionProvider"  로 "context 로 만들어" "모든 앱에 전달"한다.
        * auth-provider 로직 : https://next-auth.js.org/getting-started/upgrade-v4#sessionprovider

    3. "login" 시에는, "signIn()" 함수를 이용한다.
            : https://next-auth.js.org/getting-started/client#signin

        * 컴포넌트 함수 안에 넣어,  [첫번째 인수에 provider 명], [두번째 인수에, credentials 안에 넣을 값(auth로직에 넣어 확인받는 값)]

            const result = await signIn("credentials", {
                redirect: false,
                email: emailRef.current.value,
                password: passwordRef.current.value,
            });

        * "callbackUrl" 이 없다면, "promise 를 return" 하므로, "결과를 result 에 저장"할 수 있다.

    4. "logout" 시에는 "signOut()" 함수를 이용한다.
            : https://next-auth.js.org/getting-started/client#signout

        * "callbackUrl" 이 없다면, "promise 를 return" 하므로, "결과를 result 에 저장"할 수 있다.
        * 그렇지만 signOut 은 callbackUrl 을 쓰는편이 좋다.

1. useRef, useState 를 통한, 값 저장하기

    useRef => 직접적인 값 컨트롤은 힘들지만, 간단함
    useState => 직접적인 값 컨트롤이 쉽지만, 아주 약간 복잡함

    <Ref>
     const valueRef = useRef
     
     const inputData = valueRef.current.value
     ...
     return(
        ...
        <input ... ref=valueRef>
     )

    <State>

     const [stateValue, setStateValue] = useState

     return(
        ...
        <input ... value={stateValue} onChange={(e)=>setValue(e.target.value)}>
     )


2. react 지만 여전히 사용가능한, document.querySelector(), document.getElementById()

     <caculate-selector.js> 에 무한히 증식하는 Value 들 때문에, State 나 Ref 로는 도저히 감당할 수 없었다.

     "실제 DOM" 을 이용하는, document 객체는, "메모리누수" 를 발생시키고, "속도를 늦출수 있다"

     "가상 DOM" 을 이용(useState 등...) 하는 것이 좋았겠지만, 방법을 모르겠다.

    하여튼

     여전히 사용 가능하다.
    
3. State에 "하나씩 추가하는 로직 만들기" 

    설명:  prev 를 이용하여, [...prev, 추가데이터] 의 배열 형태로, "setState" 를 한다.

        useEffect(() => {                                              
            if (foodValue) {
            setFoodInCalculator((prev) => [
                ...prev,
                foodData.find((food) => food.id === String(foodValue)),
            ]);
            }
        }, [foodValue]); 

4. "필터링 로직"

    < 하나에 맞춤 >

        function filterFoodWithCategory(category) {
            const filterd = foodData.filter((food) => food.category === category);
            setFilterdData(filterd);
        }

    < 하나라도 포함 >

        function filterFoodWithCategory(category) {
            const filterd = foodData.filter((food) => food.category.includes(category));
            setFilterdData(filterd);
        }

5. "계산기 로직"

    1. 수량 변경
    2. 수량을 기준, 다른 DOM 을 자동 변경
    3. 변경된 DOM 전부를 지정(querySelectorAll)
    4. 지정된 모든 DOM을 for 문을 사용하여, Array 형태로 만듬

        let newArray = [];
        for (const data of alldata) {
            newArray.push(data.value);
        }

    5. Array 를 ".reduce()" 를 사용해 전부 합산

        let totalCalories = newArray.reduce((sum, current) => +sum + +current);


6. Swiper API 의 사용

    swiper-react : https://swiperjs.com/react#usage
    swiper-effect : https://swiperjs.com/demos#effect-fade

7. 컴포넌트 함수내 조건문 두가지 [&&, 삼항식]

        < && >
            {trueValue && <div> 이것 </div>}

            둘다, 맞으면 뒤에것 실행

        < 삼항식 >
            {trueValue ? (<div> 이것 </div>) : (<div> 저것 </div>)}

            trueValue 이면, 이것, 아니면 저것

8. z-index 를 통해, 위아래 조정

9. 사전렌더링, 사전데이터페칭의 조건

    1) 사람들이 많이 이용할것 같은 페이지 => 사전데이터페칭, 사전렌더링

    2) 사람들이 페이지 안에서 몇가지만 자주 이용할 것 같은 페이지 => 사전 데이터페칭(일부만)

    3) 사람들이 자주 이용함에도 불구, 데이터가 너무너무 많은 페이지 => getServerSideProps 로 사전 데이터페칭

    4) 사람들이 자주 이용하지 않을 것 같은 페이지 => 사전렌더링 데이터페칭 X

        * "getSession" 을 사용하려면 "getServerSideProps" 를 사용할것


10. 라우터 보호, 클라이언트 보호, 사이트 보호

    1) 클라이언트 1차 보호
        : "useSession" 을 통해, "status" 가 "unauthenticated" 면 
            "들어가는 버튼을 숨긴다."

    2) 클라이언트 보호
        : "useSession" 을 통해, "status" 가 "unauthenticated" 면 
            "useRouter" 를 통해 다른곳으로 보낸다.

    3) 라우터 보호
        : api 에, "getSession" 을 통해, "session" 이 없다면, return 하고 에러를 발생시킨다.

    4) 사이트 보호2
        : API 안에, 클라이언트로부터 오는 body를 validation 하여, 이상한것들을 걸러낸다.

            'includes("이상한것")' 가 제일 많이 쓰인다.


11. 랜덤선택

    "Math.ceil()" 과 "Math.random()" 을 이용해, "food Array 안의 갯수를 곱"한다.

12. Array 형태에, id만 쭈루룩 담겨있을때, id 를 통해, 전체 데이터를 양식에 맞게 불러오는 기능 [ for + filter()]


        newData = []

        foodIdDatas = [ 1, 5, 7, 10 , 12 ...]    //id만담겨있는Array

        foodData = [ {id:1, name :"..."},{id:2, name :"..."},{id:3, name :"..."} ]    //data가있는Array

    [로직] : "모든 idData 에 대하여, 실행을 하는데, Data중 id와 맞는게 있다면, 빼서, 새 배열에 넣는다."
           : "filter" 의 결과값은 "Array" 이므로 "..." 을 이용하여, 넣어준다.
           : "find" 도 좋다

        for (const id of foodIdDatas){
            const result = foodData.filter((food) => food.id === id )
            newData.push(...result)
        }


13. Layout 을 만들때, web용과 mobile 용 두개를 따로 만들어, 한 Layout 에 넣어서 사용하면, media-query 에 사용하기 좋다.


                                                    <Layout>

                        <Layout-header>                                     <Layout-footer>

        <Layout-header-web>     <Layout-header-mobile>

    
        "Layout-header" 에서는, media-query 를 통해, 크기에 맞는 LayoutHeader 를 활성화시킬수 있다.

            import LayoutHeaderForMobile from "./layout-header-for-mobile";
            import LayoutHeaderForWeb from "./layout-header-for-web";
            import styles from "./layout-header.module.css";
            
            function LayoutHeader() {
            return (
                <div>
-                   <header className={styles.headerForWeb}>
                        <LayoutHeaderForWeb />
                    </header>
-                   <header className={styles.headerForMobile}>
                        <LayoutHeaderForMobile />
                    </header>
                </div>
            );
            }
            export default LayoutHeader;
            

[새로 알게된 것, 복습한것, 실수한것] ==========================================================================================================================

1. react bootstrap
    https://react-bootstrap.github.io/

2. swiper
    https://swiperjs.com/react#usage
        homepage-slide.js
        homepage-slide.module.css

    "기본사용", "이펙트사용"
        이펙트 : https://swiperjs.com/demos#effect-fade

3. 미우스오버 효과 onMouseOver, onMouseOut, onMouseLeave 아주좋군..! ...

4. 드롭다운 메뉴 구성하기

    1. < dropdown component 는 알아서 만들것>

    2.  "드롭다운 동작 구현"

        const [show, setShow] = useState(false);

        function showDropDown() {
            setShow(true);
        }

        function closeDropDown() {
            setShow(false);
        }  
            ...

        <li className={styles.li} onMouseOver={showDropDown}>
            <div onMouseLeave={closeDropDown}>
            뭐먹지
            {show && <DropDown />}
            </div>
        </li>

5. Grid, 자동으로 colum 갯수 맞춰주기 [repeat, auto-fill, mixmax("xx" rem, 1fr)]

            display: grid;
-           grid-template-columns: repeat(auto-fill, minmax(15rem, 1fr));
            gap: 1rem;
        }

6. Array.reduce() 에 관하여
    : Array.reduce() 는, "합을 할때 가장 많이 사용한다."

    const array = [1, 2, 3, 4];

    const initialValue = 0;
    const sumWithInitial = array.reduce((sum, current) => sum + current, initialValue);

        => // 0 + 1 + 2 + 3 + 4

    https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce



7. style 에 관하여. ["따옴표가 없음을 명심~!"]

        let sedingStyle;

        if (state === "pending") {
=           sedingStyle = styles.pending;
        }
        if (state === "error") {
-           sedingStyle = styles.error;
        }
        if (state === "success") {
=           sedingStyle = styles.success;
        }

        return (
            <div className={styles.notification}>
            <div className={sedingStyle}>

8. postion absoulte 가운데 정렬

    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);


9. next-auth 의 authOptions 코드에 관하여

    < credentials provider 일때, session 옵션 까먹지 말자>
    session: {
        jwt: true,
    },

10. next-auth 의 signIn 에 관하여

    당연히 그냥 쓰면 안되고, function에 넣어서, 
    preventDefault 도 사용하고 나서,

    signIn 안에, [첫번재 옵션에] "어떤 provider 썼는지" , [두번째 옵션인 객체 안]에, 
    "redirect 설정", 
    "provider 만들때, auth 에 사용할 credentials 안에 들어갈 변수들"
    을 넣어 주어야 provider 측에서, auth validation 으로, validation 이 가능하다.

    redirect 를 설정하고 싶다면, { callbackUrl: '/'  } 으로, URL 설정을 해줄 수 도 있다.

    
    const result = await signIn("credentials", {
        redirect: false,
        email: emailRef.current.value,
        password: passwordRef.current.value,
      });

11. next-auth 의 클라이언트 API 보호에 관하여

    1) 클라이언트 1차 보호 : 버튼 숨기기

        {status === "unauthenticated" && (
            <li>
            <Link href={"/login"}> 로그인</Link>
            </li>
        )}


    2) 클라이언트 2차 보호 : 들어가면 튕겨나가게하기

        <컴포넌트 함수 안에>
            if (status === "loading") {
                return <div>...loading</div>;
            }
            if (status === "authenticated") {
                router.replace("/");
            }

    3) API 보호 : 아무나 못 접근하게

        <API 안의 handler function 안에>
            const session = await getSession({ req: req });

            if (!session) {
            res.status(401).json({ message: "not authenticated" });
            return;
            }

12. useRef 가 아닌 useState 로 값을 뽑기 (값을 자유자재로 다루기 위함)

        const [email, setEmail] = useState()

        <input type={"email"} id={"email"} required value={email} onChange={(e) => setEmail(e.target.value)}


    [DOM 에 접근하는 것 (event.target.value) 이 중유하다 ]

-       *** onChange={(e)=>setEmail(e.target.value)}

13. [css] img 조정, object-fit

14. getSession 사용법

    const session = await getSession({req:req});

15. ENV 의 사용
    
    [next.config.js 의 조정]
    
        import {...} from "next/constants"

        module.exports = (phase, { defaultConfig }) => {
            if (phase === PHASE_DEVELOPMENT_SERVER) {
              return {
                env:{
                    customKey: 'my-value',
                    ...
                }
              }
            }
        }

    [ 사용 ]
        {process.env.customKey}

16. context 를 만들어서, 음식등록기(addingpage) 에, 음식번호 자동으로 추가하도록 만들기 를 하려햤지만!!

    createContext 와 useContext 는, (= react context)
        서버측 코드에서 실행이 불가능 하므로, fetch 를 사용해서, api 를 통해 불러와야하는데,

        그럴바에 그냥, adding component 에서, import 해서, 사용하는게, 메모리를 덜 잡아먹겠다
    
    ==> 안함!



17. Array.push 에 관하여 *****

    Array = [1,2,3,4]

    ** const total = Array.push(5)

        ==> console.log(total) = 5
            console.log(Array) = [1,2,3,4,5]

18. 데이터 불러온것들 [원하는 기준으로]정리해서 정렬하기

    const allPosts = allFiles.map((filename) => getSinglePost(filename));
    const sortedPosts =  allPosts.sort((postA,postB)=>(postA.date>postB.date ? -1 : 1))

-   중요한점 Object 는  "데이터path 만 저장하는 것" 이란 것을 잊지 말자.
-       이렇게 해봐야, sortedFoodData 가 아닌, foodData 로 써도, 같은 "정렬된 Object 이다"

        const { foodData } = props;

        const sortedFoodData = foodData.sort((A, B) => (A.name > B.name ? 1 : -1));
        const [insertFoodData, setInsertFoodData] = useState(foodData);


19. Mongodb "특정데이터만 가져오기, 특정데이터 빼고 가져오기"

    1) 특정데이터 "만" 가져오기     ==>     find({},{ name: 1})     ==> name 만 가져옴
    2) 특정데이터 "빼고" 가져오기   ==>     find({},{ name: 0})     ==> 모두 가져오기, "name 만 빼고"

20. 하나하나 넣을때마다, 하나하나 추가되는 useState 만들기
    
    < 프로세스 >
        1. foodValue 를 담는 State 하나
        2. Calculator[총집합] 에 들어갈 foodValue 들로 이루어진, foodArray State 하나

        3. select 에, onChange 를 달아서, 바뀔때마다, foodValue 에 값을 넣어준다.

        4. useEffect 를 통해, foodValue 가 바뀔때마다, foodArray 의 값에 추가되게 만든다
-               setFoodInCalculator((prev) => [...prev, foodValue])

        5. 초기 빈값이 들어가기 때문에, if 조건을 통해, foodValue 가 있을때만, foodArray 에 넣도록 한다.

    < 코드 >

        function Page() 
                    
            const [foodValue, setFoodValue] = useState();
            const [foodInCalculator, setFoodInCalculator] = useState([]);

            useEffect(() => {
                if (foodValue) {
                    setFoodInCalculator((prev) => [...prev, foodValue]);
                }
            }, [foodValue]);

            return (
                ...
                <select onChange={(e) => setFoodValue(e.target.value)}>
                    {foodData.map((food) => (
                        <option key={food.id} value={food.id}>
                            {food.name}
                        </option>

                        ...
            ))})
    

21. [CSS] 센터맞추기 (Translate "X" , calc() "O")

    position: absolute;
    width: 20rem;
    top: 35%;
    left: calc(50% - 10rem);

22. filter 사용할때, 들어만 있으면 찾으려면 ["includes 를 쓰자"] "== 을 사용하지 말고!"