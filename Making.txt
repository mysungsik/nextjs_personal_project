[ 페이지 기능 구성 ] ========================================

로그인, 회원가입

뭐먹지 - 카테고리별 (다이어트, 한식, 양식, 중식, 디저트)
         태그별 ( 매콤, 짭잘, 달달 )
         고급 ( 파인다이닝 메뉴, 비싼 고기 등...)



    * 주요기능

        1. 칼로리계산기
        2. 회원가입 후, "내 음식" 페이지
-       3. 뭐먹지 - 모든 음식 [카테고리별 정리 *** ]

        3-1. 뭐먹지 - 모든 음식 - "내 음식" 안에 담기

        4. 뭐먹지 - 랜덤 골라주기  (기본적으로, 모든 데이터로 , ** 만약, 로그인을 했다면 , "내 음식" 안에서만 랜덤 골라주기 가능 )

        ** 음식 저장시 [id, name, price, taste , category, fancy, calorie]

        ** 음식 카테고리 [ 다이어트 , 한식 , 양식 , 일식 , 베트남 , 중식 , 디저트 ] 
        ** 음식 맛구성  [ 매콤  ,달달 , 짭짤, 삼삼, 새콤 , 씁쓸]
        ** 음식 고급구성 [ true or false ]
        ** 음식 정보구성 [ 칼로리, 영양성분(탄단지) ]


[ 코드 기능 구성 ] ================================

1. 사용 언어
    javascript, react, nextjs

2. MODAL UI
    react-bootstrap
    https://react-bootstrap.github.io/getting-started/introduction/

3. 로그인 기능
    next-auth

        credentials provider = https://next-auth.js.org/providers/credentials
        _app.js sessionprovider = https://next-auth.js.org/getting-started/client#sessionprovider
        useSession = https://next-auth.js.org/getting-started/client#sessionprovider
        getSession
        signIn
        signOut

4. 슬라이더 swiper

5. 




[ 메이킹 인덱스 ] ==================================================

1. Layout, footer 작업 부터

2. 로그인 페이지 생성, 회원가입 페이지 생성

3. MongoDb 연결

4. 회원가입 api + [npm i bcrypt]

5. useState 로, 회원가입시 [전송중, 성공, 실패] notification 화면 안에 표시 (context X)  

6. signup validation 작성

7. 추가적으로, "MODAL" 사용하여,  회원가입 성공하면, 바로 로그인 페이지로 넘어가게

8. 로그인 기능 구현
    1) "finduserinfo" helper 함수를 만든다.
    2) /api/auth/[...nextauth].js 에 authOptions 를 통해, credentials provider 를 선택하여, auth validation 을 작성한다.  
    3) signIn, signOut 을 구현한다.

9. 로그인 페이지, validation 구현 및 validation 에 따른, 유저 표시 구현

10. 로그아웃 구현

12. 라우터 보호 구현, API 보호 구현

    1) 클라이언트 1차 보호 : 버튼 숨기기

            {status === "unauthenticated" && (
                <li>
                <Link href={"/login"}> 로그인</Link>
                </li>
            )}


    2) 클라이언트 2차 보호 : 들어가면 튕겨나가게하기

        <컴포넌트 함수 안에>
            if (status === "loading") {
                return <div>...loading</div>;
            }
            if (status === "authenticated") {
                router.replace("/");
            }

    3) API 보호 : 아무나 못 접근하게

        <API 안의 handler function 안에>
            const session = await getSession({ req: req });

            if (!session) {
            res.status(401).json({ message: "not authenticated" });
            return;
            }
        

13. 컨텍트 페이지 구현

14. 컨텍트 validation, 로그인 validation, 회원가입 validation 완벽하게 구현
        
    회원가입 : "같은 이메일 있는지", 요상한 문자로 가입하지 않았는지

    로그인 : ==> next-auth 에서, validation 관리

    컨텍트 : 요상한 문자를 적지는 않았는지? 어떻게...? 확인하지?

===========================================================================================================
    <여기부터! 기능측면 시작>

15. 홈페이지 구현
        : 전체 삼등분 // 삼각형 형태로 위두개, 아래한개 => 뭐먹지?(음식들- 카테고리별정리한), 랜덤 선택기, 고오급 음식
        : "OR" 슬라이드로 넘어가게 한줄로 촥촥, 해서 3개 =>  뭐먹지?(음식들- 카테고리별정리한), 랜덤 선택기, 고오급 음식

    "슬라이드" : swiper 사용
        https://swiperjs.com/react#usage

    "드롭다운" : 
        1. < layout-dropdown.js > 만들고
        2. < layout-dropdown.module.css > 만들고

        3. onMouseOver, onMouseLeave 를 통해, state 를 바꿔, 드롭다운메뉴 조정

            const [show, setShow] = useState(false);

            function showDropDown() {
                setShow(true);
            }
            
            function closeDropDown() {
                setShow(false);
            }  
                ...

            <li className={styles.li} onMouseOver={showDropDown}>
                <div onMouseLeave={closeDropDown}>
                뭐먹지
                {show && <DropDown />}
                </div>
            </li>


16. 음식들 구현 <allfoods.js>

        대안1.  좌측으로 일자로- 카테로리 촥
           그 카테고리 누르면, 카테고리 해당되는 음식들이 우측에, 카드형식으로 촥

            "마치, 무인계산기 처럼"


        대안2. HEADER 처럼 위에, 카테고리 촥
            그 카테고리 누르면, 카테리고리 해당되는 음식들이 하단으로 촥! 카드형식으로

    
        ** 어쨋거나, "페이지네이션을 필수일듯"
        아니면 길게 쭉쭉, SCROLL 로 도 가능

    "food item", "food list", "food category-header"

17. 카테고리 별로 정리되게 만들기

    < food-category-header.js > ====================================

        function FoodCategoryHeader(props) {
            const { foodData } = props;
            const [insertFoodData, setInsertFoodData] = useState(foodData);
            
                ...

            function foodFilter(category) {
                const filteredFoods = foodData.filter((food) => food.category === category);
            
                setInsertFoodData(filteredFoods);
            }
                ...

            <ul className={styles.ul}>
                <li onClick={() => setInsertFoodData(foodData)}>전체</li>
                <li onClick={() => foodFilter("diet")}> 다이어트 </li>
                <li onClick={() => foodFilter("korean")}> 한식 </li>
                <li onClick={() => foodFilter("western")}> 양식</li>

        ========================================================================        

    ** keyPoint : "만든 함수에 파라미터를 넣었으면"
                    " onClick 해서 실행할때, callback 함수 형태로 넣어주어야"
                        onClick={ ()=> function("파라미터")}
                    " useState 무한루프에 빠지는 것을 막을 수 있다."

                    만약, onClick={ function("파라미터")} 형태로, callback 없이 적으면
                    click 할때가아니고, "무한대로, useState 가 실행되어, 무한루프에 빠진다."

18. 음식 상세정보 페이지 만들기

    => 대충 넣어두었음.
    => Db에서 가져와야 하므로, Db 에 추가 기능부터 만들어서, Db 에 차곡차곡 쌓고, API 만들어서 채울것

19. 음식들 정보도 잘 저장 [DB에 저장] ==> ADMIN 만들어서, "추가" 가능하게 만들기

    <작업할것>
        1.[OK]  저장 완성했으니, allfoods 에 data Db 것으로 바꾸기,     

        2.[OK]  adding page 에서, getStaticProps 로, find 한 값f을 받아와, 갯수를 adding form 에 넣어주어,
                adding form 에 총 음식번호가 몇번까지 되어있는지 옆에 써주게 만들기                                 

        3.[OK] login 해서 adding page 에는, admin 유저 email 을 가지고 있는 사람만 출입 가능하게 만들기
            useSession 으로, user email 빼서, admin@test.com 아니면 쫓아내

            API도, admin@test.com 아니면 쫓아내 [authenticated && admin@test.com]

        4. [OK] admin 만, layout header 에 추가페이지 만들게하기
 
* 저장시 alt 도 넣어서, Image 태그 안에 넣어주자 자꾸 오류메시지 보기 싫다 [OK]

* context 를 만들어서, 음식등록기(addingpage) 에, 음식번호 자동으로 추가하도록 만들기 를 하려햤지만!!

    createContext 와 useContext 는, (= react context)
        서버측 코드에서 실행이 불가능 하므로, fetch 를 사용해서, api 를 통해 불러와야하는데,

        그럴바에 그냥, adding component 에서, import 해서, 사용하는게, 메모리를 덜 잡아먹겠다

    ==> 안함!


20. 음식 디테일 페이지 만들어서 내 카트에 담기 가능하게 만들기

    디테일 페이지는, getStaticProps, getStaticpaths 에서, callback 을 "blocking" 으로 할것, (매우매우 많을것이기 때문에)

    ** 카트에 담는것은, FOODID 뿐


[ 전체, 음식 디테일 페이지 기능 총정리]

    1. 뭐먹지페이지 => db에서 받아서 filter 처리 하여, 카테고리 별로 정리되게 만듬

    2. 음식 디테일 페이지 
        1) db에서 받아온 데이터를, find 해서, 넣어줌

        2) 유저별로 [ 내 음식] 에 데이터를 넣는 버튼 포함
            데이터를 넣는 버튼은
            DB에 저장된 데이터중, userEmail 이 이미 db에 존재하는지(없다면 바로 insert)
            있다면, 해당하는 foodid 가 이미 data 안에 들어가있는지 
                                (없다면 추가하고 update)
                                (있다면 삭제하고 update)
            해당 유저에 대한 데이터를, 받아와
            sameFoodId 가 있는지 없는지 판단하는 로직을 만들어
            getServerSideProps 로, "프리데이터페칭"을 진행해, 초기 버튼의 이름(추가 혹은 삭제)
            를 정해주고,
                이후에는, 버튼을 누를때마다, 버튼의 이름이 변경되게 만듬

            ==> "이 기능은, useDetail에, [내음식] 페이지와 연결되어, 내가 무슨 음식을 찜했는지 알려준다."

    
[ 유저 디테일 페이지의, "내음식" 기능 정리]

        1) "내음식" DB에서 가져오기

            < DB data 형태 > 
                {userEmail : ...,
                foodArray : [1, 5, 2 ... 12]}   // foodid들

            <프로세스>
                getSession 으로 email 확보, DB에서 foodArray 가져오고, 전체 food data 가져와서,
-               [for + filter 처리로, foodArray의 각 배열(foodid)마다 filter 처리를 통해, 맞는 값만 하나씩 빼서, 새 배열에 넣어서, 값을 넘겨준다.]
+               "선형화 이슈" 를 피하는, "두번의 JSON변환" 도 추가

            <코드>
                export async function getServerSideProps(context) {
                    const session = await getSession({ req: context.req });

                    const client = await connectDb();
                    const allfoods = await findAllFoods(client);

                    const favoriteFoodsData = await favoriteFoodArray(client, session.user.email);
                    const favoriteFoodsArray = favoriteFoodsData.foodArray;

                    let favorites = [];

                    for (const foodid of favoriteFoodsArray) {
                        const result = allfoods.filter((food) => food.id === foodid);
                        favorites.push(...result);
                    }

                    const favroiteEscapedIssue = JSON.parse(JSON.stringify(favorites));

                    return {
                        props: { favorites: favroiteEscapedIssue },
                    };
                    }

                export default FavoriteFoodsPage;

                ==> "이 값은", favorite-foods COMPONNET 를 거쳐, FoodList COMPONNET 에 들어가, 값을 보이게 한다.
                        

22. 개인 페이지 만들기 [OK]
: "내정보"
: "내 음식"


23. 칼로리 계산기 만들기 [OK]

    <caculate-selector.js>

        import styles from "./caculate-selector.module.css";
        import { useState, useEffect } from "react";

        function CaloireFoodSeletor(props) {
            const { foodData } = props;
            const [filteredData, setFilterdData] = useState([]); // 카테고리 선택하면, filter 되는 Data 정리
            const [foodValue, setFoodValue] = useState(); // 음식을 눌렀을때, 그 음식에 대한 foodid 선택
            const [foodInCalculator, setFoodInCalculator] = useState([]); // 총 누른 음식들의 Data를 Array 형태로 정리

            const [totalCalories, setTotalCalorie] = useState(0);

            // 전체 Data를 순서대로 정렬
            const sortedFoodData = filteredData.sort((A, B) =>
                A.name > B.name ? 1 : -1
            );

            // foodValue 가 바뀔때, [기존 + 새 foodid로 가져온 foodData] 를 삽입
            useEffect(() => {
                if (foodValue) {
                setFoodInCalculator((prev) => [
                    ...prev,
                    foodData.find((food) => food.id === String(foodValue)),
                ]);
                }
            }, [foodValue]);

            // [reset 로직]

            function resetHandler() {
                setFoodInCalculator([]);
                setTotalCalorie(0);
            }

            // [필터링 로직] 카테고리 눌렀을때,

            function filterFoodWithCategory(category) {
                const filterd = foodData.filter((food) => food.category === category);
                setFilterdData(filterd);
            }

            // [계산기 로직]  계산을 위해 DOM 에 접근

            //  1. "추가버튼은 무한정 증가가 가능하므로, useRef 나, useState 가 아닌, 직접 DOM 에 접근한다"
            //  2. "값을 바꿀 수 있는 섭취량 변화에 DOM 을 맞춰 onChange 트리거를 활용해 자동계산을 시킨다."
            //  3. 자동계산된 칼로리 값 전부를 "querySelectorAll" 로 DOM 에 접근
            //  4. for 를 사용하여, 자동계산된 칼로리 값 전부를 "새로만든 Array 에 push하고"
            //  5. .reduce() 를 이용하여, 전부 합산시켜
            //  6. useState 를 통해 만든 totalCalorie 에 집어넣어
            //  7. 총 칼로리의 value 에 넣어주었다.

            function calculate(e) {
                let foodCalorie = e.target.parentElement.children[2].children[0].value;
                let quantity = e.target.parentElement.children[1].value;

                let total = foodCalorie * quantity;

                e.target.parentElement.children[3].children[0].value = total;

                const alltotals = document.querySelectorAll(".total");

                let newArray = [];
                for (const alltotal of alltotals) {
                newArray.push(alltotal.value);
                }
                let totalCalories = newArray.reduce((sum, current) => +sum + +current);

                setTotalCalorie(totalCalories);
            }

            return (
                <main className={styles.maindiv}>
                    <section className={styles.selector}>
                        <h1> 선택기 </h1>
                        <div>
                            <h4> 카테고리</h4> {/* 1  카테고리 선택*/}
                            <ul>
                                <li onClick={() => filterFoodWithCategory("다이어트")}>다이어트</li>
                                <li onClick={() => filterFoodWithCategory("한식")}>한식</li>
                                            ...
                                            
                                <li onClick={() => filterFoodWithCategory("디저트")}>디저트</li>
                            </ul>
                        </div>
                        <div>
                            <h4> 음식 </h4>
                            {filteredData && (
                                <ul>
                                {sortedFoodData.map((food) => (
                                    <li
                                    key={food.id}
                                    value={food.id}
                                    onClick={(e) => setFoodValue(e.target.value)}
                                    >
                                    {food.name}
                                    </li>
                                ))}
                                </ul>
                            )}
                        </div>
                    </section>

                    <section className={styles.calculator}>
                        <h2> 계산기</h2>
                        <div>
                        <ul>
                            <li> 선택음식</li>
                            <li> 섭취량 </li>
                            <li> 100g 당 칼로리</li>
                            <li> 섭취 칼로리</li>
                        </ul>
                        {foodInCalculator.map((food) => (
                            <ul key={food.id}>
                            <li>{food.name}</li>
                            <input
                                type={"number"}
                                step={1}
                                defaultValue={0}
                                onChange={(e) => calculate(e)}
                            />
                            <li>
                                <input type={"number"} readOnly value={food.calorie} />
                            </li>
                            <li>
                                <input
                                type={"number"}
                                readOnly
                                className={"total"}
                                defaultValue={0}
                                />
                            </li>
                            </ul>
                        ))}
                        <hr />
                        <div>총 칼로리</div>
                        <input type={"number"} value={totalCalories} readOnly />
                        </div>
                        <button onClick={resetHandler}> 초기화 </button>
                    </section>
                </main>
            );
            }

        export default CaloireFoodSeletor;


24. 태그별 음식 만들기
    [OK]


[추가. 불러온 데이터들, 이름순 정렬 시키기] [OK]

25. 랜덤 음식 선택기 추가 "모션은.. 어떻게하지?"


26. ADMIN 용 음식 페이지 만들어서,  "수정", "삭제" 가능하게




[새로 알게된 것] ===================================================

1. react bootstrap
    https://react-bootstrap.github.io/

2. swiper
    https://swiperjs.com/react#usage
        homepage-slide.js
        homepage-slide.module.css

3. 미우스오버 효과 onMouseOver, onMouseOut, onMouseLeave 아주좋군..! ...

4. 드롭다운 메뉴 구성하기

    1. < dropdown component 는 알아서 만들것>

    2.  "드롭다운 동작 구현"

        const [show, setShow] = useState(false);

        function showDropDown() {
            setShow(true);
        }

        function closeDropDown() {
            setShow(false);
        }  
            ...

        <li className={styles.li} onMouseOver={showDropDown}>
            <div onMouseLeave={closeDropDown}>
            뭐먹지
            {show && <DropDown />}
            </div>
        </li>

5. Grid, 자동으로 colum 갯수 맞춰주기 [repeat, auto-fill, mixmax("xx" rem, 1fr)]

            display: grid;
-           grid-template-columns: repeat(auto-fill, minmax(15rem, 1fr));
            gap: 1rem;
        }


[복습 및 까먹엇던것 및 실수]===============================================

1. style 에 관하여. ["따옴표가 없음을 명심~!"]

        let sedingStyle;

        if (state === "pending") {
=           sedingStyle = styles.pending;
        }
        if (state === "error") {
-           sedingStyle = styles.error;
        }
        if (state === "success") {
=           sedingStyle = styles.success;
        }

        return (
            <div className={styles.notification}>
            <div className={sedingStyle}>

2. postion absoulte 가운데 정렬

    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);


3. next-auth 의 authOptions 코드에 관하여

    < credentials provider 일때, session 옵션 까먹지 말자>
    session: {
        jwt: true,
    },

4. next-auth 의 signIn 에 관하여

    당연히 그냥 쓰면 안되고, function에 넣어서, 
    preventDefault 도 사용하고 나서,

    signIn 안에, [첫번재 옵션에] "어떤 provider 썼는지" , [두번째 옵션인 객체 안]에, 
    "redirect 설정", 
    "provider 만들때, auth 에 사용할 credentials 안에 들어갈 변수들"
    을 넣어 주어야 provider 측에서, auth validation 으로, validation 이 가능하다.

    redirect 를 설정하고 싶다면, { callbackUrl: '/'  } 으로, URL 설정을 해줄 수 도 있다.

    
    const result = await signIn("credentials", {
        redirect: false,
        email: emailRef.current.value,
        password: passwordRef.current.value,
      });

5. next-auth 의 클라이언트 API 보호에 관하여

    1) 클라이언트 1차 보호 : 버튼 숨기기

        {status === "unauthenticated" && (
            <li>
            <Link href={"/login"}> 로그인</Link>
            </li>
        )}


    2) 클라이언트 2차 보호 : 들어가면 튕겨나가게하기

        <컴포넌트 함수 안에>
            if (status === "loading") {
                return <div>...loading</div>;
            }
            if (status === "authenticated") {
                router.replace("/");
            }

    3) API 보호 : 아무나 못 접근하게

        <API 안의 handler function 안에>
            const session = await getSession({ req: req });

            if (!session) {
            res.status(401).json({ message: "not authenticated" });
            return;
            }

6. useRef 가 아닌 useState 로 값을 뽑기 (값을 자유자재로 다루기 위함)

        const [email, setEmail] = useState()

        <input type={"email"} id={"email"} required value={email} onChange={(e) => setEmail(e.target.value)}


    [DOM 에 접근하는 것 (event.target.value) 이 중유하다 ]

-       *** onChange={(e)=>setEmail(e.target.value)}

7. [css] img 조정, object-fit

8. getSession 사용법

    const session = await getSession({req:req});

9. ENV 의 사용
    
    [next.config.js 의 조정]
    
        import {...} from "next/constants"

        module.exports = (phase, { defaultConfig }) => {
            if (phase === PHASE_DEVELOPMENT_SERVER) {
              return {
                env:{
                    customKey: 'my-value',
                    ...
                }
              }
            }
        }

    [ 사용 ]
        {process.env.customKey}

10. context 를 만들어서, 음식등록기(addingpage) 에, 음식번호 자동으로 추가하도록 만들기 를 하려햤지만!!

    createContext 와 useContext 는, (= react context)
        서버측 코드에서 실행이 불가능 하므로, fetch 를 사용해서, api 를 통해 불러와야하는데,

        그럴바에 그냥, adding component 에서, import 해서, 사용하는게, 메모리를 덜 잡아먹겠다
    
    ==> 안함!



11. Array.push 에 관하여 *****

    Array = [1,2,3,4]

    ** const total = Array.push(5)

        ==> console.log(total) = 5
            console.log(Array) = [1,2,3,4,5]

12. 데이터 불러온것들 [원하는 기준으로]정리해서 정렬하기

    const allPosts = allFiles.map((filename) => getSinglePost(filename));
    const sortedPosts =  allPosts.sort((postA,postB)=>(postA.date>postB.date ? -1 : 1))

-   중요한점 Object 는  "데이터path 만 저장하는 것" 이란 것을 잊지 말자.
-       이렇게 해봐야, sortedFoodData 가 아닌, foodData 로 써도, 같은 "정렬된 Object 이다"

        const { foodData } = props;

        const sortedFoodData = foodData.sort((A, B) => (A.name > B.name ? 1 : -1));
        const [insertFoodData, setInsertFoodData] = useState(foodData);


13. Mongodb "특정데이터만 가져오기, 특정데이터 빼고 가져오기"

    1) 특정데이터 "만" 가져오기     ==>     find({},{ name: 1})     ==> name 만 가져옴
    2) 특정데이터 "빼고" 가져오기   ==>     find({},{ name: 0})     ==> 모두 가져오기, "name 만 빼고"

14. 하나하나 넣을때마다, 하나하나 추가되는 useState 만들기
    
    < 프로세스 >
        1. foodValue 를 담는 State 하나
        2. Calculator[총집합] 에 들어갈 foodValue 들로 이루어진, foodArray State 하나

        3. select 에, onChange 를 달아서, 바뀔때마다, foodValue 에 값을 넣어준다.

        4. useEffect 를 통해, foodValue 가 바뀔때마다, foodArray 의 값에 추가되게 만든다
-               setFoodInCalculator((prev) => [...prev, foodValue])

        5. 초기 빈값이 들어가기 때문에, if 조건을 통해, foodValue 가 있을때만, foodArray 에 넣도록 한다.

    < 코드 >

        function Page() 
                    
            const [foodValue, setFoodValue] = useState();
            const [foodInCalculator, setFoodInCalculator] = useState([]);

            useEffect(() => {
                if (foodValue) {
                    setFoodInCalculator((prev) => [...prev, foodValue]);
                }
            }, [foodValue]);

            return (
                ...
                <select onChange={(e) => setFoodValue(e.target.value)}>
                    {foodData.map((food) => (
                        <option key={food.id} value={food.id}>
                            {food.name}
                        </option>

                        ...
            ))})
    
[하고싶은것]==========================================================================================

1. header 에 손대면, 툭 튀어나오는 ...

2. media query 싹다 만들기

[수정할것] =================================================

0. 미디어쿼리 싹다 만들기 [마지막에]

0. Meta 의 header 전부 추가하기

1. notification css 수정하기
    : 자꾸 화면 움직이게 만듬 => absolute 로 방해 안되게하기

2. MODAL 재사용할거면, props 로 값을 넘겨주는게 중요

3. ADMIN 만들어서, "추가", "수정", "삭제" 가능하게 만들기

4. ** Db 에서 끌어와서 값을 넣어줄 때에는, 반드시, allfoods Page에서, getStaticProps 를 통해, 끌어오자

5. 모든 FOOD들을, 여러번 DB에서 가져오면 안되니까, allfoods 에서 어차피 가져오는 FOOD의 LENGTH 를, CONTEXT 로 만들어서, ADDING 페이지에 쓸 수 있게하기
    혹은!, allfoods 페이지 내에, adding 을 추가하든가.