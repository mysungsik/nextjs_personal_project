1. 칼로리 계산기 기능

    <로직>
        
        //  1. "추가버튼은 무한정 증가가 가능하므로, useRef 나, useState 가 아닌, 직접 DOM 에 접근한다"
        //  2. "값을 바꿀 수 있는 섭취량 변화에 기준을 맞춰 onChange 트리거를 활용해 자동계산을 시킨다."
        //  3. 자동계산된 칼로리 값 전부를 "querySelectorAll" 로 DOM 에 접근
        //  4. for 를 사용하여, 자동계산된 칼로리 값 전부를 "새로만든 Array 에 push하고"
        //  5. .reduce() 를 이용하여, 전부 합산시켜
        //  6. useState 를 통해 만든 totalCalorie 에 집어넣어
        //  7. 총 칼로리의 value 에 넣어주었다.


        "정리" :    1.수량 변경
                    2. 수량을 기준, 다른 DOM 을 자동 변경
                    3. 변경된 DOM 전부를 지정(querySelectorAll)
                    4. 지정된 모든 DOM을 for 문을 사용하여, Array 형태로 만듬
                    5. Array 를 reduce 를 사용해 전부 합산

    <코드>

        import styles from "./caculate-selector.module.css";
        import { useState, useEffect } from "react";
        import Button from "../ui/card/button";

        function CaloireFoodSeletor(props) {
        const { foodData } = props;
        const [filteredData, setFilterdData] = useState([]);              // 카테고리 선택하면, filter 되는 Data 정리
        const [foodValue, setFoodValue] = useState();                     // 음식을 눌렀을때, 그 음식에 대한 foodid 선택
        const [foodInCalculator, setFoodInCalculator] = useState([]);     // 총 누른 음식들의 Data를 Array 형태로 정리

        const [totalCalories, setTotalCalorie] = useState(0);

        // 전체 Data를 순서대로 정렬
        const sortedFoodData = filteredData.sort((A, B) =>
            A.name > B.name ? 1 : -1
        );
        
        useEffect(() => {                                                       // useEffect 를 통해 foodValue 가 바뀔때, 
            if (foodValue) {                                                        [기존 + 새 foodid로 가져온 foodData] 를 삽입
            setFoodInCalculator((prev) => [
                ...prev,
                foodData.find((food) => food.id === String(foodValue)),
            ]);
            }
        }, [foodValue]);  

        function resetHandler() {                                                      // [reset 로직]
            setFoodInCalculator([]);
            setTotalCalorie(0);
        }

        function filterFoodWithCategory(category) {                                     // [필터링 로직] 카테고리 눌렀을때,
            const filterd = foodData.filter((food) => food.category === category);
            setFilterdData(filterd);
        }

        function calculate(e) {                                                         // [계산기 로직]
            let foodCalorie = e.target.parentElement.children[2].children[0].value;
            let quantity = e.target.parentElement.children[1].value;

            let total = foodCalorie * quantity;

            e.target.parentElement.children[3].children[0].value = Math.ceil(total);

            const alltotals = document.querySelectorAll(".total");

            let newArray = [];
            for (const alltotal of alltotals) {
            newArray.push(alltotal.value);
            }
            let totalCalories = newArray.reduce((sum, current) => +sum + +current);

            setTotalCalorie(Math.ceil(totalCalories));
        }

        return (
            <main className={styles.maindiv}>
            <section className={styles.selector}>
                    ...
                <ul className={styles.category}>
                    <li onClick={() => filterFoodWithCategory("다이어트")}>다이어트</li>

                    <li onClick={() => filterFoodWithCategory("디저트")}>디저트</li>
                </ul>
                                                                                        //  [ 필터링 로직 ] 
                {filteredData && (                                          
                    <ul className={styles.subSelector}>
                    {sortedFoodData.map((food) => (
                        <li
                        key={food.id}
                        value={food.id}
                        onClick={(e) => setFoodValue(e.target.value)}
                        >
                        {food.name}
                        </li>
                    ))}
                    </ul>
                )}
                </div>
            </section>

            <section className={styles.calculator}>
                <h2> 계산기</h2>
                    ...
                </ul>
                <hr></hr>

                {foodInCalculator.map((food) => (
                    <ul key={food.id} className={styles.calculatorFoodList}>
                    <li>{food.name}</li>
                    <input
                        type={"number"}
                        step={1}
                        defaultValue={0}
                        onChange={(e) => calculate(e)}
                        className={styles.quantity}
                    />
                        ...
            </main>

2. "개인 아이디별" 각각의 아이템 찜 기능

    < 로직 >

        1. "로그인" 후, "음식 디테일 페이지"에서 "추가" 버튼을 누르면, "Array 형태의 foodId 와  userEmail"이 db에 넣어진다.

        2. db에서 userEmail 과 같은 "data 가 있다면" (처음 추가한것이 아니라면)
            "다른 음식을 추가 할때", db에서 "Array 형태의 food Id" 를 불러와, 추가하고, Update 한다.

        3. "Array 형태의 food Id" 를 체크해, "[foodid].js" 에서 params (foodId) 가 그 db의 food Id 와 같다면

            "isSameFoodId" 를 만들어, [true 또는 false] 로 값을 넣어,

            "true" (기존에 "추가" 눌렀던 음식) 면 "Array 형태의 foodId" 에서 그 food id 를 "삭제" 하고 Update
            "false"(처음 "추가" 를 누른 음식) 면 "Array 형태의 foodId" 에서 그 food id 를 "추가" 하고 Update

    < 코드 >
        < api / addingfood.js >

            import { connectDb } from "../../../helper/userdetail-db-util";
            import { getSession } from "next-auth/react";

            async function handler(req, res) {
            const session = await getSession({ req: req });

            if (!session) {
                res.status(401).json({ message: "you are not authenticated" });
                return;
            }

            if (req.method === "POST") {
                const client = await connectDb();

                const { userEmail, foodId } = req.body;

                const findResult = await client         // userEmail 이 이미 존재하는 데이터인가?
                .db("eating")
                .collection("userFavorite")
                .findOne({ userEmail: userEmail });
                
                if (!findResult) {                      // "만약 없다면" Array 형태로, foodId 를 집어넣어준다.
                const foodArray = [foodId];

                const insertResult = await client
                    .db("eating")
                    .collection("userFavorite")
                    .insertOne({ userEmail, foodArray });

                res.status(200).json({ message: "success", insertResult });
                client.close();
                return;
                }
            
                const oldFoodArray = findResult.foodArray;                      // "있다면" ,그 data 안에 있는 foodArray를 꺼낸 후,
                                                                                // 현재 넣으려고 하는 foodId가 있는지 확인한다..
                const sameInArray = oldFoodArray.find((id) => id === foodId);

                if (!sameInArray) {
                let newFoodArray = oldFoodArray.push(String(foodId));       // "userEmail 이 이미 존재", "foodArray는 존재하지 않는다면"
                                                                             // foodArray에 새로운 foodId를 추가하여, newFoodArray를 만들어서 다시 넣어준다.
                const updateResult = await client
                    .db("eating")
                    .collection("userFavorite")
                    .updateOne(
                    { userEmail: userEmail },
                    { $set: { foodArray: oldFoodArray } }
                    );

                res.status(200).json({ message: "success", updateResult });
                client.close();
                return;
                }

                const newFoodArray = oldFoodArray.filter((id) => id !== String(foodId));    // "userEmail 이 이미 존재," "foodArray 도 이미 존재한다면"
                                                                                            // foodArray에서, 이미 존재하는 foodId를 제거하고, 
                const updateResult = await client                                           // newFoodArray를 만들어서 다시 넣어준다.
                .db("eating")
                .collection("userFavorite")
                .updateOne(
                    { userEmail: userEmail },
                    { $set: { foodArray: newFoodArray } }
                );

                res.status(200).json({ message: "ghjghjghj", updateResult });
                client.close();
            }
            }

            export default handler;

3. 로그인 기능

    <next-auth 의 사용>

        0. npm install next-auth
        1. /api/auth/[...]/[...nextauth].js 안에, Auth 로직을 만든다.

            * credentials auth 로직 : https://next-auth.js.org/providers/credentials
            * auth 로직은 "async authorize(credentials){ }" 함수 안에
            * "return" 은 "name, email, id 만 가능"하다.
                return {
                    email: credentials.email,
                    name: userInfo.name,
                };

        2. "SessionProvider"  로 "context 로 만들어" "모든 앱에 전달"한다.
            * auth-provider 로직 : https://next-auth.js.org/getting-started/upgrade-v4#sessionprovider

        3. "login" 시에는, "signIn()" 함수를 이용한다.
                : https://next-auth.js.org/getting-started/client#signin

            * 컴포넌트 함수 안에 넣어,  [첫번째 인수에 provider 명], [두번째 인수에, credentials 안에 넣을 값(auth로직에 넣어 확인받는 값)]

                const result = await signIn("credentials", {
                    redirect: false,
                    email: emailRef.current.value,
                    password: passwordRef.current.value,
                });

            * "callbackUrl" 이 없다면, "promise 를 return" 하므로, "결과를 result 에 저장"할 수 있다.

        4. "logout" 시에는 "signOut()" 함수를 이용한다.
                : https://next-auth.js.org/getting-started/client#signout

            * "callbackUrl" 이 없다면, "promise 를 return" 하므로, "결과를 result 에 저장"할 수 있다.
            * 그렇지만 signOut 은 callbackUrl 을 쓰는편이 좋다.


4. 태그별, 카테고리별 정리 기능

        < 로직 >

            1. 전체 FoodData 를 가져온다.
            2. filter를 이용해, 필터링 함수를 만든다.

            
        <코드>
            "하나에 맞춤"

                function filterFoodWithCategory(category) {
                    const filterd = foodData.filter((food) => food.category === category);
                    setFilterdData(filterd);
                }

            "하나라도 포함"

                function filterFoodWithCategory(category) {
                    const filterd = foodData.filter((food) => food.category.includes(category));
                    setFilterdData(filterd);
                }